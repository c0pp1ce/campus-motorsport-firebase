rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	// General db access not allowed. Less restrictive rules defined for needed collections.
  	allow read: if false;
    allow write: if false;
  
  	// Check if the user is signed in.
    function isSignedIn() {
    	return request.auth.uid != null;
    }
  
  	// Verify request for required and optional fields on creation.
  	function verifyFields(required, optional) {
    	let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) 
      	&& request.resource.data.keys().hasOnly(allAllowedFields);
    }
    
    // Checks if the current users email is verified.
    function isVerifiedUser() {
      return request.auth != null && request.auth.token.email_verified;
    }
      
    // Checks if the user has been accepted. Accepted users need to have a verified email.
    function isAcceptedUser() {
      return  isVerifiedUser() && request.auth.token.accepted == true;
    }
    
    // Checks if the current user is an admin. Admins need to be accepted users.
    function isAdmin() {
      return isAcceptedUser() && 
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    
    
    // users collection - doc id equals uid.
    match /users/{uid} {
    
    	/// Defines the allowed fields of the user document.
    	function verifyUserStructure() {
      	return verifyFields(["uid", "firstname", "lastname", "email"],
        			["accepted", "isAdmin", "verified", "onSite"]);
      }
      
      // On creation it is not allowed to set any role.
      function verifyUserCreationStructure() {
      	return verifyFields(["uid", "firstname", "lastname", "email"], []);
      }
    
      // Returns true if the current user is the owner of this user ressource.
      function verifyIsOwnData() {
        return request.auth.uid == uid;
      }
      
      // Restrict updates to a users role.
      // Accepted/verified Users can only change their own data. Admins can change any users data.
      // verified is not a crucial role.
      function verifyUserUpdate() {
        let updatesCrucialRoles = request.resource.data.diff(resource.data).
        													affectedKeys().hasAny(['accepted', 'isAdmin']);
        // User can change his own data except the roles. Admin can change everything.
        // User needs a verified email to be able to update his data.
        return (!updatesCrucialRoles &&  isVerifiedUser() && verifyIsOwnData())
        				|| isAdmin();
      }
      
      // Read your own data. Access to more data only for accepted users.
      allow read: if verifyIsOwnData() || isAcceptedUser();
    	allow create: if isSignedIn()
      							&& verifyUserCreationStructure()
                    && verifyIsOwnData();
      allow update: if verifyUserUpdate() && verifyUserStructure();
      allow delete: if verifyIsOwnData() || isAdmin();
    }
    
    
    
    // vehicle components
    match /components/{document} {

      function verifyComponentStructure() {
        return verifyFields(["name", "category", "state", "usedBy", "id"], ["additionalData", "baseEventCounter"]);
      }
      
      function verifyAllowedUpdates() {
      	let updatesForbiddenFields = request.resource.data.diff(resource.data).
        													affectedKeys().hasAny(['additionalData', 'id', 'baseEventCounter']);
        return !updatesForbiddenFields;                      
      }

    	allow read: if isAcceptedUser();
    	allow create: if isAdmin() && verifyComponentStructure();
      allow update: if isAcceptedUser() && verifyAllowedUpdates();
      allow delete: if isAdmin();
    }

    // component-containers (vehicles and stock)
    match /component-containers/{document} {

      function verifyContainerStructure() {
        return verifyFields(["name", "type"], ["components", "currentState", "image", "updates", "events"]);
      }

    	allow read: if isAcceptedUser();
    	allow create: if isAdmin() && verifyContainerStructure();
      allow update: if isAcceptedUser() && verifyContainerStructure();
      allow delete: if isAdmin();
    }

    // training-grounds
    match /training-grounds/{document} {

      function verifyContainerStructure() {
        return verifyFields(["name", "storagePath", "lastUpdate"], ["image"]);
      }

      // Created via cloud function which accesses the wiki.
    	allow read: if isAcceptedUser();
    	allow create: if false;
      allow update: if isAcceptedUser();
      allow delete: if isAdmin();
    }

    // team-structure
    match /team-structure/{document} {

      function verifyContainerStructure() {
        return verifyFields(["name", "storagePath"], ["url"]);
      }

    	allow read: if isAcceptedUser();
    	allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // clipboards
    match /clipboards/{document} {

      function verifyContainerStructure() {
        return verifyFields(["name", "creationDate", "content", "type"], ["image"]);
      }

    	allow read: if isAcceptedUser();
    	allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // meta-info
    //
    // This collection holds info like when has training-grounds been updated etc.
    match /meta-info/{document} {

    	allow read: if isAcceptedUser();
    	allow create: if isAdmin();
      allow update: if isAcceptedUser();
      allow delete: if isAdmin();
    }
  }
}